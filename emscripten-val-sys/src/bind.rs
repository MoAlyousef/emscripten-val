/* automatically generated by rust-bindgen 0.72.1 */

pub const __BYTE_ORDER: u32 = 1234;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __USE_TIME_BITS64: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT64_MIN: i64 = -9223372036854775808;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const INT64_MAX: u64 = 9223372036854775807;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const UINT64_MAX: i32 = -1;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST64_MIN: i64 = -9223372036854775808;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST64_MAX: u64 = 9223372036854775807;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const INT_LEAST64_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST64_MAX: i32 = -1;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const UINT_LEAST64_MAX: i32 = -1;
pub const INTMAX_MIN: i64 = -9223372036854775808;
pub const INTMAX_MAX: u64 = 9223372036854775807;
pub const UINTMAX_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const INT_FAST16_MIN: i32 = -2147483648;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST16_MAX: u32 = 2147483647;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const UINT_FAST16_MAX: u32 = 4294967295;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIZE_MAX: i32 = -1;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of max_align_t"][::std::mem::size_of::<max_align_t>() - 32usize];
    ["Alignment of max_align_t"][::std::mem::align_of::<max_align_t>() - 16usize];
    ["Offset of field: max_align_t::__clang_max_align_nonce1"]
        [::std::mem::offset_of!(max_align_t, __clang_max_align_nonce1) - 0usize];
    ["Offset of field: max_align_t::__clang_max_align_nonce2"]
        [::std::mem::offset_of!(max_align_t, __clang_max_align_nonce2) - 16usize];
};
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
pub type int_fast8_t = i8;
pub type int_fast64_t = i64;
pub type int_least8_t = i8;
pub type int_least16_t = i16;
pub type int_least32_t = i32;
pub type int_least64_t = i64;
pub type uint_fast8_t = u8;
pub type uint_fast64_t = u64;
pub type uint_least8_t = u8;
pub type uint_least16_t = u16;
pub type uint_least32_t = u32;
pub type uint_least64_t = u64;
pub type int_fast16_t = i32;
pub type int_fast32_t = i32;
pub type uint_fast16_t = u32;
pub type uint_fast32_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _EM_VAL {
    _unused: [u8; 0],
}
pub type EM_VAL = *mut _EM_VAL;
pub type TYPEID = *const ::std::os::raw::c_void;
pub type GenericEnumValue = ::std::os::raw::c_int;
pub type GenericFunction = *mut ::std::os::raw::c_void;
unsafe extern "C" {
    pub fn _embind_register_void(voidType: TYPEID, name: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn _embind_register_bool(
        boolType: TYPEID,
        name: *const ::std::os::raw::c_char,
        trueValue: bool,
        falseValue: bool,
    );
}
unsafe extern "C" {
    pub fn _embind_register_integer(
        integerType: TYPEID,
        name: *const ::std::os::raw::c_char,
        size: usize,
        minRange: i32,
        maxRange: u32,
    );
}
unsafe extern "C" {
    pub fn _embind_register_bigint(
        integerType: TYPEID,
        name: *const ::std::os::raw::c_char,
        size: usize,
        minRange: i64,
        maxRange: u64,
    );
}
unsafe extern "C" {
    pub fn _embind_register_float(
        floatType: TYPEID,
        name: *const ::std::os::raw::c_char,
        size: usize,
    );
}
unsafe extern "C" {
    pub fn _embind_register_std_string(stringType: TYPEID, name: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn _embind_register_std_wstring(
        stringType: TYPEID,
        charSize: usize,
        name: *const ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    pub fn _embind_register_emval(emvalType: TYPEID);
}
unsafe extern "C" {
    pub fn _embind_register_memory_view(
        memoryViewType: TYPEID,
        typedArrayIndex: ::std::os::raw::c_uint,
        name: *const ::std::os::raw::c_char,
    );
}
unsafe extern "C" {
    pub fn _embind_register_function(
        name: *const ::std::os::raw::c_char,
        argCount: ::std::os::raw::c_uint,
        argTypes: *const TYPEID,
        signature: *const ::std::os::raw::c_char,
        invoker: GenericFunction,
        function: GenericFunction,
        isAsync: bool,
    );
}
unsafe extern "C" {
    pub fn _embind_register_value_array(
        tupleType: TYPEID,
        name: *const ::std::os::raw::c_char,
        constructorSignature: *const ::std::os::raw::c_char,
        constructor: GenericFunction,
        destructorSignature: *const ::std::os::raw::c_char,
        destructor: GenericFunction,
    );
}
unsafe extern "C" {
    pub fn _embind_register_value_array_element(
        tupleType: TYPEID,
        getterReturnType: TYPEID,
        getterSignature: *const ::std::os::raw::c_char,
        getter: GenericFunction,
        getterContext: *mut ::std::os::raw::c_void,
        setterArgumentType: TYPEID,
        setterSignature: *const ::std::os::raw::c_char,
        setter: GenericFunction,
        setterContext: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn _embind_finalize_value_array(tupleType: TYPEID);
}
unsafe extern "C" {
    pub fn _embind_register_value_object(
        structType: TYPEID,
        fieldName: *const ::std::os::raw::c_char,
        constructorSignature: *const ::std::os::raw::c_char,
        constructor: GenericFunction,
        destructorSignature: *const ::std::os::raw::c_char,
        destructor: GenericFunction,
    );
}
unsafe extern "C" {
    pub fn _embind_register_value_object_field(
        structType: TYPEID,
        fieldName: *const ::std::os::raw::c_char,
        getterReturnType: TYPEID,
        getterSignature: *const ::std::os::raw::c_char,
        getter: GenericFunction,
        getterContext: *mut ::std::os::raw::c_void,
        setterArgumentType: TYPEID,
        setterSignature: *const ::std::os::raw::c_char,
        setter: GenericFunction,
        setterContext: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn _embind_finalize_value_object(structType: TYPEID);
}
unsafe extern "C" {
    pub fn _embind_register_class(
        classType: TYPEID,
        pointerType: TYPEID,
        constPointerType: TYPEID,
        baseClassType: TYPEID,
        getActualTypeSignature: *const ::std::os::raw::c_char,
        getActualType: GenericFunction,
        upcastSignature: *const ::std::os::raw::c_char,
        upcast: GenericFunction,
        downcastSignature: *const ::std::os::raw::c_char,
        downcast: GenericFunction,
        className: *const ::std::os::raw::c_char,
        destructorSignature: *const ::std::os::raw::c_char,
        destructor: GenericFunction,
    );
}
unsafe extern "C" {
    pub fn _embind_register_class_constructor(
        classType: TYPEID,
        argCount: ::std::os::raw::c_uint,
        argTypes: *const TYPEID,
        invokerSignature: *const ::std::os::raw::c_char,
        invoker: GenericFunction,
        constructor: GenericFunction,
    );
}
unsafe extern "C" {
    pub fn _embind_register_class_function(
        classType: TYPEID,
        methodName: *const ::std::os::raw::c_char,
        argCount: ::std::os::raw::c_uint,
        argTypes: *const TYPEID,
        invokerSignature: *const ::std::os::raw::c_char,
        invoker: GenericFunction,
        context: *mut ::std::os::raw::c_void,
        isPureVirtual: ::std::os::raw::c_uint,
        isAsync: bool,
    );
}
unsafe extern "C" {
    pub fn _embind_register_class_property(
        classType: TYPEID,
        fieldName: *const ::std::os::raw::c_char,
        getterReturnType: TYPEID,
        getterSignature: *const ::std::os::raw::c_char,
        getter: GenericFunction,
        getterContext: *mut ::std::os::raw::c_void,
        setterArgumentType: TYPEID,
        setterSignature: *const ::std::os::raw::c_char,
        setter: GenericFunction,
        setterContext: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn _embind_register_class_class_function(
        classType: TYPEID,
        methodName: *const ::std::os::raw::c_char,
        argCount: ::std::os::raw::c_uint,
        argTypes: *const TYPEID,
        invokerSignature: *const ::std::os::raw::c_char,
        invoker: GenericFunction,
        method: GenericFunction,
        isAsync: bool,
    );
}
unsafe extern "C" {
    pub fn _embind_register_class_class_property(
        classType: TYPEID,
        fieldName: *const ::std::os::raw::c_char,
        fieldType: TYPEID,
        fieldContext: *const ::std::os::raw::c_void,
        getterSignature: *const ::std::os::raw::c_char,
        getter: GenericFunction,
        setterSignature: *const ::std::os::raw::c_char,
        setter: GenericFunction,
    );
}
unsafe extern "C" {
    pub fn _embind_create_inheriting_constructor(
        constructorName: *const ::std::os::raw::c_char,
        wrapperType: TYPEID,
        properties: EM_VAL,
    ) -> EM_VAL;
}
unsafe extern "C" {
    pub fn _embind_register_enum(
        enumType: TYPEID,
        name: *const ::std::os::raw::c_char,
        size: usize,
        isSigned: bool,
    );
}
unsafe extern "C" {
    pub fn _embind_register_enum_value(
        enumType: TYPEID,
        valueName: *const ::std::os::raw::c_char,
        value: GenericEnumValue,
    );
}
unsafe extern "C" {
    pub fn _embind_register_constant(
        name: *const ::std::os::raw::c_char,
        constantType: TYPEID,
        value: f64,
    );
}
unsafe extern "C" {
    pub fn _embind_register_optional(optionalType: TYPEID, type_: TYPEID);
}
unsafe extern "C" {
    pub fn _embind_register_user_type(type_: TYPEID, typeName: *const ::std::os::raw::c_char);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct InitFunc {
    _unused: [u8; 0],
}
unsafe extern "C" {
    pub fn _embind_register_bindings(f: *mut InitFunc);
}
