/* automatically generated by rust-bindgen 0.72.1 */

pub const __BYTE_ORDER: u32 = 1234;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __USE_TIME_BITS64: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT64_MIN: i64 = -9223372036854775808;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const INT64_MAX: u64 = 9223372036854775807;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const UINT64_MAX: i32 = -1;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST64_MIN: i64 = -9223372036854775808;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST64_MAX: u64 = 9223372036854775807;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const INT_LEAST64_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST64_MAX: i32 = -1;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const UINT_LEAST64_MAX: i32 = -1;
pub const INTMAX_MIN: i64 = -9223372036854775808;
pub const INTMAX_MAX: u64 = 9223372036854775807;
pub const UINTMAX_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const INT_FAST16_MIN: i32 = -2147483648;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST16_MAX: u32 = 2147483647;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const UINT_FAST16_MAX: u32 = 4294967295;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIZE_MAX: i32 = -1;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
pub type int_fast8_t = i8;
pub type int_fast64_t = i64;
pub type int_least8_t = i8;
pub type int_least16_t = i16;
pub type int_least32_t = i32;
pub type int_least64_t = i64;
pub type uint_fast8_t = u8;
pub type uint_fast64_t = u64;
pub type uint_least8_t = u8;
pub type uint_least16_t = u16;
pub type uint_least32_t = u32;
pub type uint_least64_t = u64;
pub type int_fast16_t = i32;
pub type int_fast32_t = i32;
pub type uint_fast16_t = u32;
pub type uint_fast32_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _EM_VAL {
    _unused: [u8; 0],
}
pub type EM_VAL = *mut _EM_VAL;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _EM_INVOKER {
    _unused: [u8; 0],
}
pub type EM_INVOKER = *mut _EM_INVOKER;
pub type TYPEID = *const ::std::os::raw::c_void;
pub const EM_INVOKER_KIND_FUNCTION: EM_INVOKER_KIND = 0;
pub const EM_INVOKER_KIND_METHOD: EM_INVOKER_KIND = 1;
pub const EM_INVOKER_KIND_CONSTRUCTOR: EM_INVOKER_KIND = 2;
pub const EM_INVOKER_KIND_CAST: EM_INVOKER_KIND = 3;
pub type EM_INVOKER_KIND = ::std::os::raw::c_int;
pub const _EMVAL_UNDEFINED: _bindgen_ty_1 = 2;
pub const _EMVAL_NULL: _bindgen_ty_1 = 4;
pub const _EMVAL_TRUE: _bindgen_ty_1 = 6;
pub const _EMVAL_FALSE: _bindgen_ty_1 = 8;
pub const _EMVAL_LAST_RESERVED_HANDLE: _bindgen_ty_1 = 8;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _EM_DESTRUCTORS {
    _unused: [u8; 0],
}
pub type EM_DESTRUCTORS = *mut _EM_DESTRUCTORS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _EM_METHOD_CALLER {
    _unused: [u8; 0],
}
pub type EM_METHOD_CALLER = *mut _EM_METHOD_CALLER;
pub type EM_GENERIC_WIRE_TYPE = f64;
pub type EM_VAR_ARGS = *const ::std::os::raw::c_void;
unsafe extern "C" {
    pub fn _emval_register_symbol(arg1: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn _emval_incref(value: EM_VAL);
}
unsafe extern "C" {
    pub fn _emval_decref(value: EM_VAL);
}
unsafe extern "C" {
    pub fn _emval_run_destructors(handle: EM_DESTRUCTORS);
}
unsafe extern "C" {
    pub fn _emval_new_array() -> EM_VAL;
}
unsafe extern "C" {
    pub fn _emval_new_array_from_memory_view(mv: EM_VAL) -> EM_VAL;
}
unsafe extern "C" {
    pub fn _emval_new_object() -> EM_VAL;
}
unsafe extern "C" {
    pub fn _emval_new_cstring(arg1: *const ::std::os::raw::c_char) -> EM_VAL;
}
unsafe extern "C" {
    pub fn _emval_new_u8string(arg1: *const ::std::os::raw::c_char) -> EM_VAL;
}
unsafe extern "C" {
    pub fn _emval_new_u16string(arg1: *const u16) -> EM_VAL;
}
unsafe extern "C" {
    pub fn _emval_take_value(type_: TYPEID, argv: EM_VAR_ARGS) -> EM_VAL;
}
unsafe extern "C" {
    pub fn _emval_get_global(name: *const ::std::os::raw::c_char) -> EM_VAL;
}
unsafe extern "C" {
    pub fn _emval_get_module_property(name: *const ::std::os::raw::c_char) -> EM_VAL;
}
unsafe extern "C" {
    pub fn _emval_get_property(object: EM_VAL, key: EM_VAL) -> EM_VAL;
}
unsafe extern "C" {
    pub fn _emval_set_property(object: EM_VAL, key: EM_VAL, value: EM_VAL);
}
unsafe extern "C" {
    pub fn _emval_as(
        value: EM_VAL,
        returnType: TYPEID,
        destructors: *mut EM_DESTRUCTORS,
    ) -> EM_GENERIC_WIRE_TYPE;
}
unsafe extern "C" {
    pub fn _emval_as_int64(value: EM_VAL, returnType: TYPEID) -> i64;
}
unsafe extern "C" {
    pub fn _emval_as_uint64(value: EM_VAL, returnType: TYPEID) -> u64;
}
unsafe extern "C" {
    pub fn _emval_equals(first: EM_VAL, second: EM_VAL) -> bool;
}
unsafe extern "C" {
    pub fn _emval_strictly_equals(first: EM_VAL, second: EM_VAL) -> bool;
}
unsafe extern "C" {
    pub fn _emval_greater_than(first: EM_VAL, second: EM_VAL) -> bool;
}
unsafe extern "C" {
    pub fn _emval_less_than(first: EM_VAL, second: EM_VAL) -> bool;
}
unsafe extern "C" {
    pub fn _emval_not(object: EM_VAL) -> bool;
}
unsafe extern "C" {
    pub fn _emval_create_invoker(
        argCount: ::std::os::raw::c_uint,
        argTypes: *const TYPEID,
        kind: EM_INVOKER_KIND,
    ) -> EM_INVOKER;
}
unsafe extern "C" {
    pub fn _emval_invoke(
        caller: EM_INVOKER,
        handle: EM_VAL,
        methodName: *const ::std::os::raw::c_char,
        destructors: *mut EM_DESTRUCTORS,
        argv: EM_VAR_ARGS,
    ) -> EM_GENERIC_WIRE_TYPE;
}
unsafe extern "C" {
    pub fn _emval_typeof(value: EM_VAL) -> EM_VAL;
}
unsafe extern "C" {
    pub fn _emval_instanceof(object: EM_VAL, constructor: EM_VAL) -> bool;
}
unsafe extern "C" {
    pub fn _emval_is_number(object: EM_VAL) -> bool;
}
unsafe extern "C" {
    pub fn _emval_is_string(object: EM_VAL) -> bool;
}
unsafe extern "C" {
    pub fn _emval_in(item: EM_VAL, object: EM_VAL) -> bool;
}
unsafe extern "C" {
    pub fn _emval_delete(object: EM_VAL, property: EM_VAL) -> bool;
}
unsafe extern "C" {
    pub fn _emval_throw(object: EM_VAL) -> bool;
}
unsafe extern "C" {
    pub fn _emval_await(promise: EM_VAL) -> EM_VAL;
}
unsafe extern "C" {
    pub fn _emval_iter_begin(iterable: EM_VAL) -> EM_VAL;
}
unsafe extern "C" {
    pub fn _emval_iter_next(iterator: EM_VAL) -> EM_VAL;
}
